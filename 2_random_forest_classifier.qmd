---
title: "Random forest classifier"
subtitle: "Series 2.2.1 - more on imbalanced dataset"
author: Jennifer HY Lin
date: '2023-12-5'
draft: true
categories: 
    - Machine learning projects
    - Tree models
    - Pandas
    - Scikit-learn
    - ChEMBL database
    - Python
jupyter: python3
format: html
bibliography: references.bib
---

##### **Brief introduction**

This post was an addition towards the last post on random forest (RF), machine learning (ML) series 2.2, and was mainly inspired by this paper (cite Esposito et al. on ghostml) from [rinikerlab](https://github.com/rinikerlab). When I started reading the paper, I felt that I should complete the random forest series by adding a random forest classifier model since last post only used a regressor. Another reason was that imbalanced datasets were a common problem in drug discovery projects, and as part of my steep learning curve, I should do something about it. I also decided not to go over too much on the origins of imbalanced datasets in drug discovery as this paper has covered it quite thoroughly. I was also aiming to make this post shorter than the last one (however, every time I sat down writing a post thinking that I should make it shorter, it always turned out to be longer than expected...).

<br>

##### **The plan**

*Introducing new packages - chembl_downloader & GHOST paper*

##### **Data source**

- using chembl_downloader to get new dataset (minor cleaning/preprocessing as focus is on dealing with imbalanced datasets in RF classifier)
    - data source thoroughness (ChEMBL version, reproducible data source workflow)
    - AChE as target

chembl_downloader reference notebooks:
- https://github.com/cthoyt/chembl-downloader/blob/main/notebooks/drug-indications.ipynb (main reference)
- https://github.com/PatWalters/practical_cheminformatics_tutorials/blob/1f7c61f83eec81081ef2605ac70440bf1940d914/misc/working_with_ChEMBL_drug_data.ipynb#L80 (full download of a specific version of ChEMBL)

```{python}
import pandas as pd
import chembl_downloader
from chembl_downloader import latest, queries, query
```

```{python}
# Show the latest version of ChEMBL used
latest_version = latest()
print(f"The latest ChEMBL version is: {latest_version}")
```

```{python}
# Query chembl_downloader to show SQL required to extract ChEMBL data for a specific protein target
# e.g. target_chembl_id for AChE: CHEMBL220
queries.markdown(queries.get_target_sql(target_id="CHEMBL220", target_type="SINGLE PROTEIN"))
```

```{python}
# Following data download works (4.41GB for SQL query below, may take several min)

# Added MOLECULE_DICTIONARY.max_phase into sql to show max phases for compounds targeting AChE

sql = """
SELECT
    ASSAYS.chembl_id              AS assay_chembl_id,
    TARGET_DICTIONARY.target_type,
    TARGET_DICTIONARY.tax_id,
    COMPOUND_STRUCTURES.canonical_smiles,
    MOLECULE_DICTIONARY.chembl_id AS molecule_chembl_id,
    MOLECULE_DICTIONARY.max_phase,
    ACTIVITIES.standard_type,
    ACTIVITIES.pchembl_value
FROM TARGET_DICTIONARY
     JOIN ASSAYS ON TARGET_DICTIONARY.tid == ASSAYS.tid
     JOIN ACTIVITIES ON ASSAYS.assay_id == ACTIVITIES.assay_id
     JOIN MOLECULE_DICTIONARY ON MOLECULE_DICTIONARY.molregno == ACTIVITIES.molregno
     JOIN COMPOUND_STRUCTURES ON MOLECULE_DICTIONARY.molregno == COMPOUND_STRUCTURES.molregno
WHERE TARGET_DICTIONARY.chembl_id = 'CHEMBL220'
    AND ACTIVITIES.pchembl_value IS NOT NULL
    AND TARGET_DICTIONARY.target_type = 'SINGLE PROTEIN'
"""

df = chembl_downloader.query(sql)
#df.head()
```

```{python}
df.head()
```

```{python}
# Save df as .csv file
df.to_csv("chembl_d_ache", sep=",", index=False)
```

```{python}
df_ache = pd.read_csv("chembl_d_ache")

df_ache.head()
```





* Model building
- re-label max phases as binary labels (max phase null/0, max phase 4/1)

- 2 approaches from GHOST paper (main idea was on shifting decision threshold)
    - approach 1 based on RDKit blog post (ref. 41)
    - approach 2 led to Generalised threshold shifting (GHOST) procedure - ghostml code

- RandomForestClassifier() from scikit-learn

* Visualisations
- ?feature importances or others